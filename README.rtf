{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red11\green76\blue180;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh20960\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
\'a0
\f1 \

\f0 Setting up Neo4J:
\f1 \
\pard\pardeftab720\li960\fi-480\sl380\partightenfactor0

\f0 \cf0 1.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Download Neo4J version 3.3: {\field{\*\fldinst{HYPERLINK "https://github.com/neo4j/neo4j/tree/3.3"}}{\fldrslt \cf2 \ul \ulc2 https://github.com/neo4j/neo4j/tree/3.3}}\
2.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Follow installation instructions on GitHub page, use 
\f2\fs24 -DskipTests
\f0\fs32 \
3.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Move Neo4J if desired (Script importData.sh accesses Neo4J from ~/Documents/neo4j-3.3, paths can be updated in scripts accordingly)\
4.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Navigate to neo4j-3.3/packaging/standalone/target/neo4j-community-3.3.0-SNAPSHOT/bin\
5.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Run 
\i ./neo4j start
\i0  to start the server\
6.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 In the browser, navigate to the link that is provided in the terminal\
7.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Login with default username 
\i neo4j 
\i0 and default password 
\i neo4j
\i0 \
8.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Follow the interface instructions to set the password (the scripts connect with username 
\i neo4j
\i0  and password 
\i test
\i0 )\
\pard\pardeftab720\sl380\partightenfactor0
\cf0 \'a0
\f1 \

\f0 Importing TADs and enhancers into Neo4J:
\f1 \
\pard\pardeftab720\li960\fi-480\sl380\partightenfactor0

\f0 \cf0 1.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Run 
\i python tadEnhancerDataToCsv.py
\i0  from the 
\i src 
\i0 directory to generate csv files in data/neo4jCsvImport\
2.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Run ./importData.sh from the 
\i src 
\i0 directory (the paths may be different depending on the installation directory) to import the data into Neo4J\
3.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 You can run this query to check if all nodes and relationships are present:\
\pard\pardeftab720\li960\sl380\partightenfactor0
\cf0 \'a0\
\pard\pardeftab720\li960\sl380\partightenfactor0

\i \cf0 match (region:Region)-[:has]->(annotation)-[:type]->(annotationType)
\i0 \

\i return region, annotation, collect(distinct annotationType) limit 20;
\i0 \
\'a0\
This should show at least 1 TAD node, 1 enhancer node, annotation nodes and region nodes, where regions have annotations, and annotations either have the type TAD or Enhancer. Regions have a start, end and chromosome property. Annotations have a cellType property. \
\pard\pardeftab720\sl380\partightenfactor0
\cf0 \'a0
\f1 \

\f0 \'a0
\f1 \

\f0 Querying Neo4J for features for a true positive and true negative test set:
\f1 \
\pard\pardeftab720\li960\fi-480\sl380\partightenfactor0

\f0 \cf0 1.
\f1\fs18 \'a0\'a0\'a0\'a0 
\f0\fs32 Run 
\i python annotateFile.py ../data/TPTNTestSet/TP.txt ../data/TPTNTestSet/TP_annotations.txt 
\i0 to annotate the true positives and write the features to TP_annotations.txt\
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf0 Data sources:
\f1 \

\f0 \'a0
\f1 \
\pard\pardeftab720\sl380\partightenfactor0

\f0\i \cf0 TAD annotations - {\field{\*\fldinst{HYPERLINK "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5478386/"}}{\fldrslt 
\i0 \cf2 \ul \ulc2 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5478386/}}
\i0 , Table S3
\f1 \

\f0\i Enhancers
\i0  - {\field{\*\fldinst{HYPERLINK "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4449149/"}}{\fldrslt \cf2 \ul \ulc2 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4449149/}}, Table S2
\f1 \
}